spring:
  datasource:
    url: jdbc:mysql://localhost:3306/workflow_service?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: ${SPRING_DATASOURCE_USERNAME:choerodon}
    password: ${SPRING_DATASOURCE_PASSWORD:123456}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    host: ${SPRING_REDIS_HOST:localhost}
    port: ${SPRING_REDIS_PORT:6379}
    database:  ${SPRING_REDIS_DATABASE:1}
    jedis:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}
  resources:
    # 资源缓存时间，单位秒
    cache.period: 3600
    # 开启gzip压缩
    chain.compressed: true
    # 启用缓存
    chain.cache: true
  cache:
    type: caffeine
    caffeine:
      spec: initialCapacity=10,maximumSize=200,expireAfterWrite=7d
    cache-names:
      - m_cache
  http:
    encoding:
      charset: UTF-8
      force: true
      enabled: true
  main:
    allow-bean-definition-overriding: true
  activiti:
    database-schema: ACTIVITI
    database-schema-update: true
    history-level: full
    db-history-used: true
    check-process-definitions: false
    async-executor-activate: true
server:
  undertow:
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
    # 默认值为8，建议设置每个CPU核心一个线程
    io-threads: ${SERVER_UNDERTOW_IO_THREADS:4}
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
    # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
    worker-threads: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    # 默认false
    direct-buffers: true
    # HTTP POST请求最大的大小
    # 默认0，无限制，可设置10M
    max-http-post-size: 10485760
    allow-unescaped-characters-in-url: true
feign:
  hystrix:
    enabled: true
choerodon:
  saga:
    service: choerodon-asgard
    consumer:
      core-thread-num: 20
      max-thread-num:  20 # 消费线程数
      poll-interval: 3 # 拉取消息的间隔(秒)，默认1秒
      enabled: true # 是否启用消费端
  schedule:
    consumer:
      enabled: true # 启用任务调度消费端
      thread-num: 1 # 任务调度消费线程数
      poll-interval-ms: 1000 # 拉取间隔，默认1000毫秒
hzero:
  service:
    platform:
      name: choerodon-platform
    oauth:
      name: choerodon-oauth
    iam:
      name: choerodon-iam
    file:
      name: choerodon-file
    message:
      name: choerodon-message
    admin:
      name: choerodon-admin
    swagger:
      name: choerodon-swagger
    gateway:
      name: choerodon-gateway
    monitor:
      name: choerodon-monitor
  import:
    transaction-control: false
  lock:
    pattern: single
    single-server:
      address: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
  scheduler:
    executor-code: HWKF_EXECUTOR
    auto-register: true
    upload-log: false
  cache-value:
    enable: true
  workflow:
    global-dimension: ${HWKF_GLOBAL_DIMENSION:USER}
    admin-temp-api: ${HWKF_ADMIN_TEMP_API:http://hzeronb.saas.hand-china.com/hadm/v1/swagger/tree}
    #企业微信消息发送agentId
    wco-agent-id: ${HWKF_WCO_AGENT_ID:1}
    #钉钉消息发送agentId
    dt-agent-id: ${HWKF_DT_AGENT_ID:1}
    attachment:
      bucket-name: ${HWKF_BUCKET_NAME:hwkf}
      root-dir: ${HWKF_ROOT_DIR:hwkf01/}
    # 工作流催办消息发送配置
    urge-template: ${HWKF_URGE_MESSAGE_TEMPLATE:HWKF.FLOW_URGE}
    # 待办消息发送配置
    todo-template: ${HWKF_TODO_MESSAGE_TEMPLATE:HWKF.TODO}
    # 拒绝后通知申请人消息发送配置
    reject-applier-template: ${HWKF_REJECT_APPLIER_TEMPLATE:HWKF.REJECT_APPLIER}
    # 拒绝后通知审批人消息发送配置
    reject-approver-template: ${HWKF_REJECT_APPROVER_TEMPLATE:HWKF.REJECT_APPROVER}
    web-domain-name: ${HWKF_WEB_DOMAIN_NAME:example.com}
    # 是否使用模型
    model:
      enabled: ${HWKF_MODEL_ENABLE:true}
    # 工作流线程池配置
    executor:
      core-pool-size: ${HWKF_EXECUTOR_CORE_POOL_SIZE:8}
      max-pool-size: ${HWKF_EXECUTOR_MAX_POOL_SIZE:20}
      queue-capacity: ${HWKF_EXECUTOR_QUEUE_CAPACITY:50}
      keep-alive-seconds: ${HWKF_EXECUTOR_KEEP_ALIVE_SECONDS:60}
    #数据归档批处理配置
    archive:
      batchPageSize: ${HWKF_ARCHIVE_BATCH_PAGE_SIZE:10000}
  resource:
    pattern: ${HZERO_RESOURCE_PATTERN:/v1/*,/choerodon/v1/*}
eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 1
    leaseExpirationDurationInSeconds: 3
    # 服务的一些元数据信息
    metadata-map:
      VERSION: 1.1.0
  client:
    serviceUrl:
      defaultZone: http://localhost:8000/eureka/
    registryFetchIntervalSeconds: 1
mybatis:
  mapperLocations: classpath*:/mapper/**/*.xml
  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  configuration:
    mapUnderscoreToCamelCase: true
    local-cache-scope: statement

hystrix:
  threadpool:
    default:
      # 执行命令线程池的核心线程数，也是命令执行的最大并发量LOGGER
      # 默认10
      coreSize: 1000
      # 最大执行线程数
      maximumSize: 1000
  command:
    default:
      execution:
        isolation:
          thread:
            # HystrixCommand 执行的超时时间，超时后进入降级处理逻辑。一个接口，理论的最佳响应速度应该在200ms以内，或者慢点的接口就几百毫秒。
            # 默认 1000 毫秒，最高设置 2000足矣。如果超时，首先看能不能优化接口相关业务、SQL查询等，不要盲目加大超时时间，否则会导致线程堆积过多，hystrix 线程池卡死，最终服务不可用。
            timeoutInMilliseconds: ${HYSTRIX_COMMAND_TIMEOUT_IN_MILLISECONDS:40000}

ribbon:
  # 客户端读取超时时间，超时时间要小于Hystrix的超时时间，否则重试机制就无意义了
  ReadTimeout: ${RIBBON_READ_TIMEOUT:30000}
  # 客户端连接超时时间
  ConnectTimeout: ${RIBBON_CONNECT_TIMEOUT:3000}
  # 访问实例失败(超时)，允许自动重试，设置重试次数，失败后会更换实例访问，请一定确保接口的幂等性，否则重试可能导致数据异常。
  OkToRetryOnAllOperations: true
  MaxAutoRetries: 1
  MaxAutoRetriesNextServer: 1
logging:
  level:
    io.choerodon.event.consumer: debug
    com.zaxxer: debug
    org.apache.ibatis: debug
    io.choerodon: debug
    org.hzero: debug